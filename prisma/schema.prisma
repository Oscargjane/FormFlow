generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [pgcrypto]
}

// Model for users
model User {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  accounts        Account[]
  sessions        Session[]
  notionDatabases NotionDatabase[]
  forms           Form[]
}

// Model for accounts
model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model for sessions
model Session {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken    String           @unique
  userId          String           @db.Uuid
  expires         DateTime

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model for Notion databases
model NotionDatabase {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  notionId        String           @unique
  name            String
  userId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  user            User             @relation(fields: [userId], references: [id])
  forms           Form[]
}

// Model for forms
model Form {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  notionDatabaseId String          @db.Uuid
  userId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  notionDatabase  NotionDatabase   @relation(fields: [notionDatabaseId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  logicRules      LogicRule[]
  validations     ValidationRule[]
  responses       FormResponse[]
}

// Model for logic rules in forms
model LogicRule {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type            String           // E.g., "show_if", "hide_if", "require_if"
  conditions      Json             // Conditions to apply the rule
  actions         Json             // Actions to execute if the condition is met
  formId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  form            Form             @relation(fields: [formId], references: [id])
}

// Model for validation rules in forms
model ValidationRule {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fieldName       String           // Field in the form to which the validation applies
  ruleType        String           // E.g., "required", "min_length", "regex"
  parameters      Json             // Validation parameters (e.g., { min: 3, max: 10 })
  errorMessage    String           // Custom error message
  formId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  form            Form             @relation(fields: [formId], references: [id])
}

// Model for form responses
model FormResponse {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  data            Json
  isValid         Boolean
  errors          Json?
  formId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  form            Form             @relation(fields: [formId], references: [id])
}