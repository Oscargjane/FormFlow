generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [pgcrypto]
}

// Model for users  
model User {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  email           String           @unique
  notionToken     String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  notionDatabases NotionDatabase[]
  forms           Form[]
}

// Model for Notion databases
model NotionDatabase {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  notionId        String           @unique
  name            String
  userId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  user            User             @relation(fields: [userId], references: [id])
  forms           Form[]
}

// Model for forms
model Form {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  notionDatabaseId String          @db.Uuid
  userId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  notionDatabase  NotionDatabase   @relation(fields: [notionDatabaseId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  logicRules      LogicRule[]
  validations     ValidationRule[]
  responses       FormResponse[]
}

// Model for logic rules in forms
model LogicRule {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type            String           // E.g, "show_if", "hide_if", "require_if"
  conditions      Json             // Conditions to apply the rule
  actions         Json             // Actions to execute if the condition is met
  formId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  form            Form             @relation(fields: [formId], references: [id])
}

// Model for validation rules in forms
model ValidationRule {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fieldName       String           // Field in the form to which the validation applies
  ruleType        String           // E.g., "required", "min_length", "regex"
  parameters      Json             // Validation parameters (e.g., { min: 3, max: 10 })
  errorMessage    String           // Custom error message
  formId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  form            Form             @relation(fields: [formId], references: [id])
}

// Model for form responses
model FormResponse {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  data            Json
  isValid         Boolean
  errors          Json?
  formId          String           @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  form            Form             @relation(fields: [formId], references: [id])
}